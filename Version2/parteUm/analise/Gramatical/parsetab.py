
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'Add Args Assignment Class Comma Double Else Id If LeftBracket LeftKey LeftParenthesis LerDouble Main Mult Number Print Public Relational Return RightBracket RightKey RightParenthesis Semicolon Static String Sub Void WhilePROG : Public Class Id LeftKey Public Static Void Main LeftParenthesis String LeftBracket RightBracket Args RightParenthesis LeftKey CMDS RightKey METODO RightKeyMETODO : Public Static Double Id LeftParenthesis PARAMS RightParenthesis LeftKey CMDS Return EXPRESSAO Semicolon RightKey\n              | VOIDPARAMS : Double Id MAIS_PARAMS\n              | VOIDMAIS_PARAMS : Comma PARAMS\n                   | VOIDDC : VAR MAIS_CMDSVAR : Double VARSVARS : Id MAIS_VARMAIS_VAR : Comma VARS\n                | VOIDCMDS : CMD MAIS_CMDS\n            | CMD_COND CMDS\n            | DC\n            | VOIDMAIS_CMDS : Semicolon CMDSCMD_COND : If LeftParenthesis CONDICAO RightParenthesis LeftKey CMDS RightKey PFALSA\n                | While LeftParenthesis CONDICAO RightParenthesis LeftKey CMDS RightKeyCMD : Print LeftParenthesis EXPRESSAO RightParenthesis\n           | Id RESTO_IDENTPFALSA : Else LeftKey CMDS RightKey\n              | VOIDRESTO_IDENT : Assignment EXP_IDENT\n                   | LeftParenthesis LISTA_ARG RightParenthesisLISTA_ARG : ARGUMENTOS\n                 | VOIDARGUMENTOS : Id MAIS_IDENTMAIS_IDENT : Comma ARGUMENTOS\n                  | VOIDEXP_IDENT : EXPRESSAO\n                 | LerDouble LeftParenthesis RightParenthesisCONDICAO : EXPRESSAO Relational EXPRESSAOEXPRESSAO : TERMO OUTROS_TERMOSTERMO : OP_UN FATOR MAIS_FATORESOP_UN : Sub\n             | VOIDFATOR : Id\n             | Number\n             | LeftParenthesis EXPRESSAO RightParenthesisOUTROS_TERMOS : Add TERMO OUTROS_TERMOS\n                     | Sub TERMO OUTROS_TERMOS\n                     | VOIDMAIS_FATORES : Mult FATOR MAIS_FATORES\n                    | VOIDVOID : '
    
_lr_action_items = {'Public':([0,5,31,],[2,6,52,]),'$end':([1,77,],[0,-1,]),'Class':([2,],[3,]),'Id':([3,16,20,27,29,30,33,35,36,37,45,46,47,61,65,66,71,74,80,87,91,92,94,104,105,106,109,111,114,118,122,123,],[4,17,17,40,-46,51,17,-46,-46,-46,69,-36,-37,40,-46,-46,-46,51,-46,69,99,17,17,-46,-19,112,-18,-23,17,17,-22,-46,]),'LeftKey':([4,15,79,81,110,113,],[5,16,92,94,114,118,]),'Static':([6,52,],[7,76,]),'Void':([7,],[8,]),'Main':([8,],[9,]),'LeftParenthesis':([9,17,23,24,25,29,35,36,37,43,45,46,47,65,66,71,80,87,99,123,],[10,30,35,36,37,-46,-46,-46,-46,63,71,-36,-37,-46,-46,-46,-46,71,103,-46,]),'String':([10,],[11,]),'LeftBracket':([11,],[12,]),'RightBracket':([12,],[13,]),'Args':([13,],[14,]),'RightParenthesis':([14,30,44,48,49,50,51,56,57,59,63,64,67,68,69,70,73,75,84,85,86,88,89,90,93,95,96,97,98,102,103,107,108,112,115,116,117,120,],[15,-46,-46,72,-26,-27,-46,78,79,81,83,-34,-43,-46,-38,-39,-28,-30,-46,-46,-35,-45,98,-29,-33,-41,-42,-46,-40,-44,-46,113,-5,-46,-4,-46,-7,-6,]),'Print':([16,20,33,92,94,104,105,109,111,114,118,122,],[23,23,23,23,23,-46,-19,-18,-23,23,23,-22,]),'If':([16,20,33,92,94,104,105,109,111,114,118,122,],[24,24,24,24,24,-46,-19,-18,-23,24,24,-22,]),'While':([16,20,33,92,94,104,105,109,111,114,118,122,],[25,25,25,25,25,-46,-19,-18,-23,25,25,-22,]),'RightKey':([16,18,20,21,22,31,32,33,34,38,53,54,55,92,94,100,101,104,105,109,111,114,119,122,125,126,],[-46,31,-46,-15,-16,-46,-13,-46,-14,-8,77,-3,-17,-46,-46,104,105,-46,-19,-18,-23,-46,122,-22,126,-2,]),'Double':([16,20,33,76,92,94,103,104,105,109,111,114,116,118,122,],[27,27,27,91,27,27,106,-46,-19,-18,-23,27,106,27,-22,]),'Assignment':([17,],[29,]),'Semicolon':([19,26,28,39,40,41,42,44,60,62,64,67,68,69,70,72,78,82,83,84,85,86,88,95,96,97,98,102,124,],[33,33,-21,-9,-46,-24,-31,-46,-10,-12,-34,-43,-46,-38,-39,-25,-20,-11,-32,-46,-46,-35,-45,-41,-42,-46,-40,-44,125,]),'Return':([20,21,22,32,33,34,38,55,104,105,109,111,118,121,122,],[-46,-15,-16,-13,-46,-14,-8,-17,-46,-19,-18,-23,-46,123,-22,]),'LerDouble':([29,],[43,]),'Sub':([29,35,36,37,44,65,66,68,69,70,71,80,84,85,86,88,97,98,102,123,],[46,46,46,46,66,46,46,-46,-38,-39,46,46,66,66,-35,-45,-46,-40,-44,46,]),'Number':([29,35,36,37,45,46,47,65,66,71,80,87,123,],[-46,-46,-46,-46,70,-36,-37,-46,-46,-46,-46,70,-46,]),'Comma':([40,51,112,],[61,74,116,]),'Add':([44,68,69,70,84,85,86,88,97,98,102,],[65,-46,-38,-39,65,65,-35,-45,-46,-40,-44,]),'Relational':([44,58,64,67,68,69,70,84,85,86,88,95,96,97,98,102,],[-46,80,-34,-43,-46,-38,-39,-46,-46,-35,-45,-41,-42,-46,-40,-44,]),'Mult':([68,69,70,97,98,],[87,-38,-39,87,-40,]),'Else':([104,],[110,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROG':([0,],[1,]),'CMDS':([16,20,33,92,94,114,118,],[18,34,55,100,101,119,121,]),'CMD':([16,20,33,92,94,114,118,],[19,19,19,19,19,19,19,]),'CMD_COND':([16,20,33,92,94,114,118,],[20,20,20,20,20,20,20,]),'DC':([16,20,33,92,94,114,118,],[21,21,21,21,21,21,21,]),'VOID':([16,20,29,30,31,33,35,36,37,40,44,51,65,66,68,71,80,84,85,92,94,97,103,104,112,114,116,118,123,],[22,22,47,50,54,22,47,47,47,62,67,75,47,47,88,47,47,67,67,22,22,88,108,111,117,22,108,22,47,]),'VAR':([16,20,33,92,94,114,118,],[26,26,26,26,26,26,26,]),'RESTO_IDENT':([17,],[28,]),'MAIS_CMDS':([19,26,],[32,38,]),'VARS':([27,61,],[39,82,]),'EXP_IDENT':([29,],[41,]),'EXPRESSAO':([29,35,36,37,71,80,123,],[42,56,58,58,89,93,124,]),'TERMO':([29,35,36,37,65,66,71,80,123,],[44,44,44,44,84,85,44,44,44,]),'OP_UN':([29,35,36,37,65,66,71,80,123,],[45,45,45,45,45,45,45,45,45,]),'LISTA_ARG':([30,],[48,]),'ARGUMENTOS':([30,74,],[49,90,]),'METODO':([31,],[53,]),'CONDICAO':([36,37,],[57,59,]),'MAIS_VAR':([40,],[60,]),'OUTROS_TERMOS':([44,84,85,],[64,95,96,]),'FATOR':([45,87,],[68,97,]),'MAIS_IDENT':([51,],[73,]),'MAIS_FATORES':([68,97,],[86,102,]),'PARAMS':([103,116,],[107,120,]),'PFALSA':([104,],[109,]),'MAIS_PARAMS':([112,],[115,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROG","S'",1,None,None,None),
  ('PROG -> Public Class Id LeftKey Public Static Void Main LeftParenthesis String LeftBracket RightBracket Args RightParenthesis LeftKey CMDS RightKey METODO RightKey','PROG',19,'p_PROG','LexSin.py',92),
  ('METODO -> Public Static Double Id LeftParenthesis PARAMS RightParenthesis LeftKey CMDS Return EXPRESSAO Semicolon RightKey','METODO',13,'p_METODO','LexSin.py',97),
  ('METODO -> VOID','METODO',1,'p_METODO','LexSin.py',98),
  ('PARAMS -> Double Id MAIS_PARAMS','PARAMS',3,'p_PARAMS','LexSin.py',104),
  ('PARAMS -> VOID','PARAMS',1,'p_PARAMS','LexSin.py',105),
  ('MAIS_PARAMS -> Comma PARAMS','MAIS_PARAMS',2,'p_MAIS_PARAMS','LexSin.py',113),
  ('MAIS_PARAMS -> VOID','MAIS_PARAMS',1,'p_MAIS_PARAMS','LexSin.py',114),
  ('DC -> VAR MAIS_CMDS','DC',2,'p_DC','LexSin.py',122),
  ('VAR -> Double VARS','VAR',2,'p_VAR','LexSin.py',126),
  ('VARS -> Id MAIS_VAR','VARS',2,'p_VARS','LexSin.py',130),
  ('MAIS_VAR -> Comma VARS','MAIS_VAR',2,'p_MAIS_VAR','LexSin.py',134),
  ('MAIS_VAR -> VOID','MAIS_VAR',1,'p_MAIS_VAR','LexSin.py',135),
  ('CMDS -> CMD MAIS_CMDS','CMDS',2,'p_CMDS','LexSin.py',140),
  ('CMDS -> CMD_COND CMDS','CMDS',2,'p_CMDS','LexSin.py',141),
  ('CMDS -> DC','CMDS',1,'p_CMDS','LexSin.py',142),
  ('CMDS -> VOID','CMDS',1,'p_CMDS','LexSin.py',143),
  ('MAIS_CMDS -> Semicolon CMDS','MAIS_CMDS',2,'p_MAIS_CMDS','LexSin.py',147),
  ('CMD_COND -> If LeftParenthesis CONDICAO RightParenthesis LeftKey CMDS RightKey PFALSA','CMD_COND',8,'p_CMD_COND','LexSin.py',151),
  ('CMD_COND -> While LeftParenthesis CONDICAO RightParenthesis LeftKey CMDS RightKey','CMD_COND',7,'p_CMD_COND','LexSin.py',152),
  ('CMD -> Print LeftParenthesis EXPRESSAO RightParenthesis','CMD',4,'p_CMD','LexSin.py',156),
  ('CMD -> Id RESTO_IDENT','CMD',2,'p_CMD','LexSin.py',157),
  ('PFALSA -> Else LeftKey CMDS RightKey','PFALSA',4,'p_PFALSA','LexSin.py',161),
  ('PFALSA -> VOID','PFALSA',1,'p_PFALSA','LexSin.py',162),
  ('RESTO_IDENT -> Assignment EXP_IDENT','RESTO_IDENT',2,'p_RESTO_IDENT','LexSin.py',166),
  ('RESTO_IDENT -> LeftParenthesis LISTA_ARG RightParenthesis','RESTO_IDENT',3,'p_RESTO_IDENT','LexSin.py',167),
  ('LISTA_ARG -> ARGUMENTOS','LISTA_ARG',1,'p_LISTA_ARG','LexSin.py',171),
  ('LISTA_ARG -> VOID','LISTA_ARG',1,'p_LISTA_ARG','LexSin.py',172),
  ('ARGUMENTOS -> Id MAIS_IDENT','ARGUMENTOS',2,'p_ARGUMENTOS','LexSin.py',176),
  ('MAIS_IDENT -> Comma ARGUMENTOS','MAIS_IDENT',2,'p_MAIS_IDENT','LexSin.py',180),
  ('MAIS_IDENT -> VOID','MAIS_IDENT',1,'p_MAIS_IDENT','LexSin.py',181),
  ('EXP_IDENT -> EXPRESSAO','EXP_IDENT',1,'p_EXP_IDENT','LexSin.py',185),
  ('EXP_IDENT -> LerDouble LeftParenthesis RightParenthesis','EXP_IDENT',3,'p_EXP_IDENT','LexSin.py',186),
  ('CONDICAO -> EXPRESSAO Relational EXPRESSAO','CONDICAO',3,'p_CONDICAO','LexSin.py',190),
  ('EXPRESSAO -> TERMO OUTROS_TERMOS','EXPRESSAO',2,'p_EXPRESSAO','LexSin.py',195),
  ('TERMO -> OP_UN FATOR MAIS_FATORES','TERMO',3,'p_TERMO','LexSin.py',199),
  ('OP_UN -> Sub','OP_UN',1,'p_OP_UN','LexSin.py',203),
  ('OP_UN -> VOID','OP_UN',1,'p_OP_UN','LexSin.py',204),
  ('FATOR -> Id','FATOR',1,'p_FATOR','LexSin.py',208),
  ('FATOR -> Number','FATOR',1,'p_FATOR','LexSin.py',209),
  ('FATOR -> LeftParenthesis EXPRESSAO RightParenthesis','FATOR',3,'p_FATOR','LexSin.py',210),
  ('OUTROS_TERMOS -> Add TERMO OUTROS_TERMOS','OUTROS_TERMOS',3,'p_OUTROS_TERMOS','LexSin.py',214),
  ('OUTROS_TERMOS -> Sub TERMO OUTROS_TERMOS','OUTROS_TERMOS',3,'p_OUTROS_TERMOS','LexSin.py',215),
  ('OUTROS_TERMOS -> VOID','OUTROS_TERMOS',1,'p_OUTROS_TERMOS','LexSin.py',216),
  ('MAIS_FATORES -> Mult FATOR MAIS_FATORES','MAIS_FATORES',3,'p_MAIS_FATORES','LexSin.py',222),
  ('MAIS_FATORES -> VOID','MAIS_FATORES',1,'p_MAIS_FATORES','LexSin.py',223),
  ('VOID -> <empty>','VOID',0,'p_VOID','LexSin.py',227),
]
